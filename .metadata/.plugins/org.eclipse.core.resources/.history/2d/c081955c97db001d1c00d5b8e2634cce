package colaTradicional;

public class ColaArrayInt implements ColaInt{
	private static final int LONGITUD_POR_DEFECTO = 20;
	private int max_longitud;
	private int cabeza;
	private int fin;
	private Object[] datos;
	
	public ColaArrayInt() {
		this.datos = new Object[this.LONGITUD_POR_DEFECTO];
		this.fin = 0;
		this.cabeza = 1;
	}
	
	public ColaArrayInt(int longitud) {
		this.max_longitud = longitud;
		this.fin = 0;
		this.cabeza = 1;
		this.datos = new Object[this.max_longitud];
	}
	
	@Override
	public void vaciar() {
		// TODO Auto-generated method stub
		this.fin = 0;
		this.cabeza = 1;
		
	}
	
	@Override
	public boolean encolar(Object o) {
		// TODO Auto-generated method stub
		if((this.fin + 2) % this.max_longitud != this.cabeza) {
			this.fin = (this.fin + 1) % this.max_longitud;
			datos[this.fin] = o;
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public Object desencolar() throws IllegalArgumentException{
		// TODO Auto-generated method stub
		if(longitud() != 0) {
			Object o = datos[cabeza];
			this.cabeza = (cabeza + 1) % this.max_longitud;
			return o;
			
		}else {
			throw new IllegalArgumentException("La cola está vacía");
		}
		
	}

	@Override
	public Object primero() {
		// TODO Auto-generated method stub
		if(longitud() != 0) {
			return datos[this.cabeza];
		}else {
			System.out.println("LA COLA ESTÁ VACÍA");
			return null;
		}
	}

	@Override
	public int longitud() {
		// TODO Auto-generated method stub
		return (this.fin + this.max_longitud - this.cabeza + 1) % this.max_longitud;
	}

}
